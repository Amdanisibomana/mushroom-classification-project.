# -*- coding: utf-8 -*-
"""Mushroom_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LIeCgNuIoPSFUS-Fdb8nrTlUJJzOEFXb

**Firstly, I install the necessary dependencies.**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

"""**Loading the Dataset**"""

data = pd.read_csv('/content/Mushroom_data.csv')
print("Dataset shape:", data.shape)
data.head()

"""**Data Exploration**"""

print("Shape of the dataset:", data.shape)
print("\nColumns:\n", data.columns)
print("\nMissing values per column:\n", data.isnull().sum())

sns.countplot(x='class', data=data)
plt.title('Distribution of Edible vs. Poisonous Mushrooms')
plt.show()

"""**Data Preprocessing**"""

df = data.copy()

le = LabelEncoder()
for col in df.columns:
    df[col] = le.fit_transform(df[col])

X = df.drop('class', axis=1)
y = df['class']

"""**splitting the data**"""

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

print("Training set size:", X_train.shape)
print("Testing set size:", X_test.shape)

"""**I use multiple models to train.**

**Firstly,** Logistic Regression
"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

X = data.drop("class", axis=1)
y = data["class"]

X_encoded = pd.get_dummies(X, drop_first=True)

X_train, X_test, y_train, y_test = train_test_split(
    X_encoded, y, test_size=0.2, stratify=y, random_state=42
)

lr_model = LogisticRegression(max_iter=2000)
lr_model.fit(X_train, y_train)

y_pred_lr = lr_model.predict(X_test)

print("Logistic Regression Accuracy:", accuracy_score(y_test, y_pred_lr))
print(classification_report(y_test, y_pred_lr))

"""**Second**,
Decision Tree
"""

from sklearn.tree import DecisionTreeClassifier

tree_model = DecisionTreeClassifier(random_state=42)
tree_model.fit(X_train, y_train)
y_pred_tree = tree_model.predict(X_test)

print("Decision Tree Accuracy:", accuracy_score(y_test, y_pred_tree))
print(classification_report(y_test, y_pred_tree))

"""**Thirdly,**
Random Forest
"""

from sklearn.ensemble import RandomForestClassifier

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

print("Random Forest Accuracy:", accuracy_score(y_test, y_pred_rf))
print(classification_report(y_test, y_pred_rf))

"""**Bar Chart of Best Model**"""

models = ['Logistic Regression', 'Decision Tree', 'Random Forest']
accuracies = [
    accuracy_score(y_test, y_pred_lr),
    accuracy_score(y_test, y_pred_tree),
    accuracy_score(y_test, y_pred_rf)
]

plt.figure(figsize=(7, 5))
sns.barplot(x=models, y=accuracies, hue=models, palette='viridis', legend=False)
plt.title('Model Performance Comparison (Accuracy)')
plt.ylabel('Accuracy')
plt.ylim(0, 1)
plt.xticks(rotation=15)
plt.tight_layout()
plt.show()